<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using GenSubstitute.Internal;

namespace GenSubstitute
{
<#
    // These are here mostly because T4 doesn't support Linq :(
    var genericArgs = new List<string>();
    var constructorArgsList = new List<string> { "ISubstitute substitute" };
    var argMembersList = new List<string>();
    var valueMembersList = new List<string>();
    var executeArgsList = new List<string>();
    var executeCallList = new List<string>();
    var ctorBodyList = new List<string> { "            _substitute = substitute;" };
    var receivedCtorBodyList = new List<string>();
    var callArgMatchList = new List<string>();
    var argMemberValuesList = new List<string>();
    var argMemberNamesList = new List<string>();
    var callArgMemberNamesList = new List<string>();
    
    for (var i = 0; i < 17; ++i)
    {
        if (i > 0)
        {
            genericArgs.Add($"TArg{i}");
            constructorArgsList.Add($"Arg<TArg{i}> arg{i}");
            argMembersList.Add($"        private readonly Arg<TArg{i}> _arg{i};");
            valueMembersList.Add($"        public readonly TArg{i} Arg{i};");
            executeArgsList.Add($"TArg{i} arg{i}");
            executeCallList.Add($"arg{i}");
            ctorBodyList.Add($"            _arg{i} = arg{i};");
            receivedCtorBodyList.Add($"            Arg{i} = arg{i};");
            callArgMatchList.Add($"            && _arg{i}.Matches(c.Arg{i})");
            argMemberValuesList.Add($"{{Arg{i}?.ToString() ?? \"null\"}}");
            argMemberNamesList.Add($"Arg{i}");
            callArgMemberNamesList.Add($"_arg{i}");
        }
        
        // <TArg, ..., TReturn>
        var funcGenerics = $"<{string.Join(", ", genericArgs)}{(i > 0 ? ", " : "")}TReturn>";
        
        // <TArg, ...>
        var actionGenerics = i > 0 ? $"<{string.Join(", ", genericArgs)}>" : "";
        
        // ISubstitute substitute, Arg<T1> arg1, ... 
        var constructorArgs = string.Join(", ", constructorArgsList);
        
        // private readonly Arg<T1> _arg1; 
        // ...
        var argMembers = string.Join("\n", argMembersList);
        
        // public readonly T1 Arg1; 
        // ...
        var valueMembers = string.Join("\n", valueMembersList);

        // TArg1 arg1, ...
        var executeArgs = string.Join(", ", executeArgsList);
        
        // arg1, ...
        var executeCall = string.Join(", ", executeCallList);
        
        // _substitute = substitute;
        // _arg1 = arg1;
        // ...
        var constructorBody = string.Join("\n", ctorBodyList);
        
        // Arg1 = arg1;
        // ...
        var receivedCtorBody = string.Join("\n", receivedCtorBodyList);
        
        // && _arg1.Matches(c.Arg1)
        // ...
        var callArgMatcher = string.Join("\n", callArgMatchList);
        
        // {Arg1?.ToString() ?? "null"}, ...
        var argMemberValues = string.Join(", ", argMemberValuesList);
        
        // Arg1, ...
        var argMemberNames = string.Join(", ", argMemberNamesList);
        
        // _arg1, ...
        var callArgMemberNames = string.Join(", ", callArgMemberNamesList);
#>
    public class ConfiguredFunc<#= funcGenerics #> : IConfiguredCall
    {
<#= argMembers #>
        private Func<#= funcGenerics #>? _execute;
        private TReturn? _returnValue;
        private ConfiguredAs _configuredAs;
        private ISubstitute _substitute;

        public ConfiguredFunc(<#= constructorArgs #>)
        {
<#= constructorBody #>
        }

        public void Configure(Func<#= funcGenerics #> implementation)
        {
            _configuredAs = ConfiguredAs.Method;
            _execute = implementation;
        }

        public void Returns(TReturn value)
        {
            _configuredAs = ConfiguredAs.Value;
            _returnValue = value;
        }

        public TReturn Execute(<#= executeArgs #>) => _configuredAs switch
        {
            ConfiguredAs.Method => _execute!(<#= executeCall #>),
            ConfiguredAs.Value => _returnValue!,
            _ => throw new IncompletelyConfiguredCallException(),
        };

        public bool Matches(IReceivedCall call) =>
            ReferenceEquals(_substitute, call.Substitute) &&
            call is ReceivedCall<#= actionGenerics #> c
            && c.ReturnType == typeof(TReturn)
<#= callArgMatcher #>;

        public object?[] GetArguments() => new object?[] { <#= callArgMemberNames #> };
    }

    public class ConfiguredAction<#= actionGenerics #> : IConfiguredCall
    {
<#= argMembers #>
        private Action<#= actionGenerics #>? _execute;
        private ISubstitute _substitute;
    
        public ConfiguredAction(<#= constructorArgs #>)
        {
<#= constructorBody #>
        }
        
        public void Configure(Action<#= actionGenerics #> implementation)
        {
            _execute = implementation;
        }

        public void Execute(<#= executeArgs #>)
        {
            if (_execute != null)
            {
                _execute(<#= executeCall #>);
            }
            else
            {
                throw new IncompletelyConfiguredCallException();
            }
        }

        public bool Matches(IReceivedCall call) =>
            ReferenceEquals(_substitute, call.Substitute) &&
            call is ReceivedCall<#= actionGenerics #> c
            && c.ReturnType == typeof(void)
<#= callArgMatcher #>;

        public object?[] GetArguments() => new object?[] { <#= callArgMemberNames #> };
    }

    public class ReceivedCall<#= actionGenerics #> : IReceivedCall
    {
        public object Substitute { get; }
        public string MethodName { get; }
        public readonly Type ReturnType;
<#= valueMembers #>
        
        public ReceivedCall(
            ISubstitute substitute,
            string methodName,
            Type returnType<#= executeArgs.Length == 0 ? "" : ", " #><#= executeArgs #>)
        {
            Substitute = substitute;
            MethodName = methodName;
            ReturnType = returnType;
<#= receivedCtorBody #>
        }

        public override string ToString() =>
            $"{ReturnType.Name} {MethodName}(<#= argMemberValues #>)";

        public object?[] GetArguments() => new object?[] { <#= argMemberNames #> };
    }

<#
    }
#>
}
